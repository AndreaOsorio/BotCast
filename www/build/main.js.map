{"version":3,"sources":["../../src/login/login/login.ts","../../src/services/citiesService.ts","../../src/services/forecastService.ts","../../src/services/authService.ts","../../src/pages/admin/dashboard/dashboard.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/pages/tabs/tabs.ts","../../src/pages/principal/principal.ts","../../src/services/geolocationService.ts","../../src/pages/graficas/graficas.ts","../../src/pages/chatbot/chatbot.ts","../../src/services/chatbotService.ts","../../src/login/register/register.ts","../../src/pages/admin/cities/cities.ts","../../src/pages/admin/myaccount/myaccount.ts","../../src/pages/admin/stats/stats.ts","../../src/pages/admin/users/users.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../node_modules/moment/locale ^/.//.*$","../../src/services/graphsService.ts","../../src/pages/admin/navbar/navbar.ts","../../src/pages/myforecasts/myforecasts.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {TabsPage} from '../../pages/tabs/tabs';\nimport {RegisterPage} from '../register/register';\nimport {UserLogin, AuthorizationService, AuthorizationToken} from '../../services/authService'\n\nimport {AdminDashboard} from '../../pages/admin/dashboard/dashboard'\n\n@Component({\n    selector: 'login',\n    templateUrl: 'login.html'\n})\n\nexport class LoginPage {\n\n    public user:UserLogin;\n\n    public constructor(public navCtrl: NavController, public authorizationService:AuthorizationService){\n        this.user = new UserLogin(\"y\",\"123\",\"\",\"\"); //testing user\n    }\n\n    /**\n     * Makes a call to authorize users according to their credentials\n     * Currently, only 2 types of users exist: administrators and common users\n     * Administrators are redirected to the admin dashboard, while common users are directed to the main mobile\n     * page with current a list of currently registered cities.\n     * An authorization token is provided to every user which specifies his/her privileges and expiration time\n     */\n    public login():void{\n        console.log(this.user);\n        this.authorizationService.authorizeUser(this.user).then(data=>{\n            if(data.authorized){\n                if(data.privileges==\"admin\"){\n                    this.navCtrl.push(AdminDashboard,{\n                        authToken:data\n                    });\n                }else{\n                    this.navCtrl.push(TabsPage,{\n                        authToken:data\n                    });\n                }\n\n            }\n        });\n    }\n\n    public register():void {\n        this.navCtrl.push(RegisterPage);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/login/login/login.ts","\nimport {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport * as $ from 'jquery';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/do';\n\n//TODO: determine final DTO format for saved cities, should probably include location to use in geoloc services\nexport class Ciudad {\n    constructor(\n        public name: string\n    ) {\n    }\n}\n\n/**\n * Service that retrieves a user's saved cities to be displayed in the main tab of the mobile page.\n */\n@Injectable()\nexport class MyCitiesService {\n\n    //Currently a dummy call to a local json\n    /**\n     * Backend REST endpoint URL to retrieve the saved cities and its corresponding key (if any)\n     */\n    apiRoot:string = '../assets/json/cities/mycities.json';\n    // apiKey:String = '68940978733581cc8ee68abc6610f53e'; //when the actual backend endpoints work\n\n    constructor(private http: Http) {\n    }\n\n    /**\n     * Function that performs a REST call to the backend and retrieves a user's saved cities as a list of cities...\n     * @returns {Promise<T>}: promise that resolves to an array of a user's saved cities in the appropriate DTO object\n     */\n    public retrieveMyCities(): Promise<Ciudad[]>{\n\n        let apiURL = `${this.apiRoot}`;\n\n        let promise = new Promise((resolve, reject) => {\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n                        let ciudades:Ciudad[] =[]\n                        let citiesJson = $.map(res.json(), function(e){return e});\n                        $.each(citiesJson, function(i,city){\n                            ciudades.push(new Ciudad(city.name))\n                        });\n                        resolve(ciudades);\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n\n        return promise;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/citiesService.ts","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/do';\n\n/**\n * Data object that encodes a specific hour's weather forecast\n */\nexport class HourForecast{\n    /**\n     *\n     * @param condition: description of that day's weather conditions e.g. Heavy Thunderstorms or Sunny\n     * @param temp: that hour's average temperature\n     * @param time: the timestamp of that hour at the first second\n     */\n    constructor(\n      public condition:string,\n      public temp: number,\n      public time: string\n    ){}\n}\n\n/**\n * Data object that encodes the current's date weather forecast\n */\nexport class TodayForecast{\n    /**\n     *\n     * @param cityName\n     * @param avgTemp\n     * @param tempMax\n     * @param tempMin\n     * @param condition: description of that day's weather conditions e.g. Heavy Thunderstorms or Sunny\n     * @param hourlyForecast\n     */\n    constructor(\n      public cityName: string,\n      public avgTemp: number,\n      public tempMax: number,\n      public tempMin: number,\n      public condition: string,\n      public hourlyForecast: HourForecast[]\n    ){}\n}\n\n/**\n * Data object that encapsulates a future's day weather forecast\n */\nexport class NextDaysForecast{\n    /**\n     * @param dayOfWeek: day of the week as a string (e.g. Thursday)\n     * @param tempMax: max temperature of that date\n     * @param tempMin: min temperature of that date\n     * @param tempAvg: average temperature of that date\n     * @param condition: description of that day's weather conditions e.g. Heavy Thunderstorms or Sunny\n     * @param date: that day's date in a YYYY-MM-DD format\n     */\n    constructor(\n      public dayOfWeek:string,\n      public tempMax:number,\n      public tempMin:number,\n      public tempAvg:number,\n      public condition: string,\n      public date:string\n    ){}\n}\n\n/**\n * Service that retrieves forecast data from the APIXU open API\n */\n@Injectable()\nexport class ForecastService {\n\n    /**\n     * Map for building the appropriate icons in the main users forecast tab based on\n     * the apixu API data\n     */\n    private iconMap ={\n        \"Partly cloudy\": \"md-partly-sunny\",\n        \"Overcast\": \"md-cloudy\",\n        \"Light rain\":\"md-umbrella\",\n        \"Sunny\":\"md-sunny\",\n        \"Mist\": \"md-cloudy\",\n        \"Cloudy\": \"md-cloudy\",\n        \"Fog\":\"md-cloudy\",\n        \"Clear\":\"md-moon\",\n        \"Light rain shower\":\"md-rainy\",\n        \"Moderate rain at times\":\"md-rainy\",\n        \"Heavy snow\":\"md-snow\",\n        \"Heavy rain\":\"md-umbrella\",\n        \"Patchy rain possible\":\"md-rainy\",\n        \"Light snow\":\"md-snow\",\n        \"Moderate snow\":\"md-snow\"\n    }\n\n    /**\n     * Utility map for pretty-printing dates\n     */\n    private dayOfWeekMap = {\n        6: \"Sunday\",\n        0: \"Monday\",\n        1: \"Tuesday\",\n        2: \"Wednesday\",\n        3: \"Thursday\",\n        4: \"Friday\",\n        5: \"Saturday\",\n    }\n\n    /**\n     * APIXU API root url and key generated for the project\n     */\n    apiRoot:string = 'http://api.apixu.com/v1/forecast.json';\n    apiKey:String = 'e3dd4e798f1d4c61821153113172310';\n\n    constructor(private http: Http) {\n    }\n\n    /**\n     * Retrieves a specific city's weather forecast for today.\n     * Optimized for retrieving less data if the requested hours are in the same day. If the requested hours go well into the next day, then\n     * a heavier query is performed that contains weather hourly data for 2 days.\n     * @param ciudad: city whose weather forecast wants to be known\n     * @returns {Promise<T>}: promise that resolves to the appropriate data object format\n     */\n    public currentWeather(ciudad: string): Promise<TodayForecast[]>{\n\n        let apiURL = `${this.apiRoot}?key=${this.apiKey}&q=${ciudad}`;\n        let currentHour = new Date().getHours();\n\n        if((currentHour+5) > 23) apiURL+=\"&days=2\";\n\n        let promise = new Promise((resolve, reject) => {\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n                        let forecast= res.json().forecast.forecastday[0]\n                        let hours:HourForecast[] = [];\n                        let i = 0;\n                        let j = 0;\n                        let h = null;\n\n                        let flagDayTransition = false;\n\n                        while(i<5) {\n                            if((currentHour+i)>23 && !flagDayTransition){\n                                currentHour = 0;\n                                forecast= res.json().forecast.forecastday[1]\n                                flagDayTransition=true;\n                            }\n\n                            if(flagDayTransition){\n                                h = forecast.hour[currentHour+j];\n                                j++;\n                            }else{\n                                h = forecast.hour[currentHour+i];\n                            }\n                            let numericHour = new Date(h.time).getHours();\n                            let stringHour = numericHour <10 ? \"0\"+numericHour+\":00\" : numericHour+\":00\";\n\n                            hours.push(new HourForecast(this.iconMap[h.condition.text], h.temp_c, stringHour))\n                            console.log(h.condition.text)\n                            i++;\n                        }\n                        let todayForecastArray:TodayForecast[] = []\n                        todayForecastArray.push(new TodayForecast(\n                            res.json().location.name,\n                            res.json().current.temp_c,\n                            forecast.day.maxtemp_c,\n                            forecast.day.mintemp_c,\n                            this.iconMap[res.json().current.condition.text],\n                            hours)\n                        );\n                        resolve(todayForecastArray);\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n\n        return promise;\n    }\n\n    /**\n     * Retrieves the weather forecast of a specific city for the required number of days\n     * @param ciudad: city whose weather forecast wants to be known\n     * @param numberOfDays: required number of days for the forecast query\n     * @returns {Promise<T>}: returns a promise that resolves to an array of data objects that contain the day-by-day forecasts\n     */\n    public weatherNextDays(ciudad: string, numberOfDays: number = 0): Promise<NextDaysForecast[]>{\n\n        const maxDaysForecast = 7;\n        if(numberOfDays == 0 || numberOfDays == undefined) numberOfDays = maxDaysForecast;\n\n        let apiURL = `${this.apiRoot}?key=${this.apiKey}&q=${ciudad}&days=${numberOfDays}`;\n        let promise = new Promise((resolve, reject) => {\n\n\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n                        let nextDaysForecasts:NextDaysForecast[] = [];\n\n                        let days= res.json().forecast.forecastday\n                        let i = 0;\n                        while(i < numberOfDays){\n\n                            let dayOfWeekString = (i==0) ?  \"Today\" : this.dayOfWeekMap[new Date(days[i].date).getDay()];\n                            nextDaysForecasts.push(\n                                new NextDaysForecast(\n                                    dayOfWeekString,\n                                    days[i].day.maxtemp_c,\n                                    days[i].day.mintemp_c,\n                                    days[i].day.avgtemp_c,\n                                    this.iconMap[days[i].day.condition.text],\n                                    days[i].date\n                                )\n                            );\n                            i++;\n                        }\n                        resolve(nextDaysForecasts);\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n\n        return promise;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/forecastService.ts","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport * as $ from 'jquery';\n\n\n/**\n * Data transfer object that encodes the credentials of a potential user that wants to login into the system\n */\nexport class UserLogin{\n    /**\n     * @param username: potential user username\n     * @param password: potential user password\n     * @param timestamp: time at which the login was attempted\n     * @param privileges: what kind of user, admin or common\n     */\n    constructor(\n        public username:string,\n        public password:string,\n        public timestamp:string,\n        public privileges:string\n    ){}\n}\n\n/**\n * Data transfer object that serves as an authentication token for logged users\n */\nexport class AuthorizationToken{\n    /**\n     * @param authorized: the user is authorized\n     * @param timestamp: authorization operation timestamp\n     * @param validUntil: time at which the token expires, users will be logged out if this happens\n     * @param privileges: what kind of user, admin or common\n     */\n    constructor(\n        public authorized:boolean,\n        public timestamp:string,\n        public validUntil:string,\n        public privileges:string\n    ){}\n}\n\n/**\n * Service that provides authentication mechanisms for the login workflow\n */\n@Injectable()\nexport class AuthorizationService {\n\n    constructor(private http: Http) {\n    }\n\n    //Currently a dummy call to a local json\n    /**\n     * Backend REST endpoint URL to retrieve the conversation between a user and the chatbot\n     */\n    apiRoot:string = '../assets/json/user/user.json';\n    // apiKey:String = '68940978733581cc8ee68abc6610f53e'; //for later\n\n    /**\n     * This method performs a lookup in the database and checks if the credentials are valid,\n     * then builds the approprite authorization for administrators, common users or rejected users.\n     * @param userToBeAuthorized: user that wants to log into the system\n     * @returns {Promise<T>}: returns a promise that resolves to the authoriztion token encoded in the approprite DTO\n     */\n    //TODO: determine token expiration mechanisms, maybe set a default amount of time and extend based on activity??\n    public authorizeUser(userToBeAuthorized:UserLogin):Promise<AuthorizationToken>{\n        let apiURL = `${this.apiRoot}`;\n\n        let promise = new Promise((resolve, reject) => {\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n\n                        let users = $.map(res.json(), function(e){return e});\n\n                        let authorized:boolean = false;\n                        let timestamp:string = (new Date())+\"\";\n                        let validUntil:string = \"0000\";\n                        let authTokenPrivileges:string = \"user\";\n\n                        $.each(users, function(i,user){\n                            console.log(user)\n                            if(userToBeAuthorized.password == user.password && userToBeAuthorized.username == user.username){\n                                authorized = true;\n                                validUntil = \"1111\";\n                                if(user.privileges == \"admin\"){\n                                    authTokenPrivileges=\"admin\";\n                                }\n                            }\n                        });\n\n                        resolve(new AuthorizationToken(authorized,timestamp,validUntil, authTokenPrivileges));\n\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n\n        return promise;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/authService.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\n\n\n@Component({\n    selector: 'dashboard',\n    templateUrl: 'dashboard.html'\n})\n\n/**\n * Admin main dashboard tab constructor\n */\nexport class AdminDashboard {\n\n    public constructor(public navCtrl: NavController) {\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/dashboard/dashboard.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 128;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 128\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 170;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 170\n// module chunks = 0","import { Component } from '@angular/core';\nimport { PrincipalPage } from '../principal/principal'\nimport { GraphsPage } from '../graficas/graficas'\nimport { ChatbotPage } from '../chatbot/chatbot'\nimport { MyForecastsPage } from '../myforecasts/myforecasts'\n\n\n@Component({\n  templateUrl: 'tabs.html'\n})\n\n/**\n * Tabs Root Component Class: declare here any additional tabs for user main mobile view, then map to appropriate HTML ionic tags in template\n */\nexport class TabsPage {\n\n  tab1Root = PrincipalPage;\n  tab2Root = GraphsPage;\n  tab3Root = ChatbotPage;\n  tab4Root = MyForecastsPage;\n\n  constructor() {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/tabs/tabs.ts","import { Component } from '@angular/core';\nimport { MyCitiesService, Ciudad } from '../../services/citiesService';\nimport { ForecastService, TodayForecast, HourForecast, NextDaysForecast } from '../../services/forecastService';\nimport { NavController, NavParams} from 'ionic-angular';\nimport {GeolocationService, RawLocation, GeolocationAddress} from '../../services/geolocationService';\n\n//TODO: fix hour change bug based on location, should take 10 mins...\n//TODO: background gif changes as a function of weather\n\n@Component({\n  selector: 'principal',\n  templateUrl: 'principal.html'\n})\n/**\n * Component for user main interface, user can add cities, select cities, select current location and\n * today's weather along withnext week's forecasts will be displayed.\n * This component's state contains the user's currently saved cities, today's and next week's weather, today's date,\n * the user's current location in latitude and longitude (raw format) and the user's approximate address.\n */\nexport class PrincipalPage {\n    private ciudades: Ciudad[] = [];\n    private todayForecast:TodayForecast[] = [];\n    private todayHourlyForecast: HourForecast[] = [];\n    private nextDaysForecast: NextDaysForecast[] = [];\n    private todaysDate:string;\n    private mycurrentLocationLatLong:RawLocation;\n    private myCurrentLocationReverseGeocoded:GeolocationAddress;\n\n    /**\n     *\n     * @param myCitiesService: service that retrieves a user's saved cities\n     * @param forecastService: service that retrieves today's and next week's weather forecasts\n     * @param navCtrl: application navigation controller\n     * @param navParams: parameters to be passed between different screens\n     * @param geolocationService: service that retrieves user's current location in latLong format, then performs an external call\n     * to a geocoder to get the exact address\n     */\n  public constructor(private myCitiesService: MyCitiesService,\n                     private forecastService: ForecastService,\n                     public navCtrl: NavController,\n                     public navParams: NavParams,\n                     private geolocationService: GeolocationService) {\n\n      this.todaysDate = this.getTodaysDate();\n\n      this.makeApiCalls(\"\");\n\n      //TODO: through auth token get user info and retrieve preferences, forecasts, etc, when backend is ready\n      console.log(this.navParams.data)\n  }\n\n    /**\n     *\n     * @param city: city whose current and future weather wants to be known\n     * This method calls all the different services to retrieve the selected city's weather and then redraws\n     * the whole view with the retrieved data in the appropriate format\n     */\n  public makeApiCalls(city:string){\n\n      if(city == undefined || city == \"\") city = \"Amsterdam\";\n\n      this.myCitiesService.retrieveMyCities().then(data=>{\n          this.ciudades = data\n      } );\n\n      this.forecastService.currentWeather(city).then( data=>{\n          this.todayForecast = data\n          this.todayHourlyForecast = this.todayForecast[0].hourlyForecast\n          console.log(this.todayForecast)\n      });\n\n      this.forecastService.weatherNextDays(city).then( data=>{\n          this.nextDaysForecast = data\n          console.log(this.nextDaysForecast)\n      });\n  }\n\n    /**\n     * First acquires user's longitude and latitude with cordova's native hardware interaction API,\n     * then performs an external call to retrieve the user's approximate address but, most importantly, his/her current city\n     * to call makeApiCalls() and redraw the view with the current location's weather\n     */\n  public getMyLocation(){\n      this.geolocationService.getMyCurrentLocation().then(data=>{\n          this.mycurrentLocationLatLong = data;\n          this.geolocationService.getMyCurrentAddressBasedOnLatLong(data).then(data=>{\n              this.myCurrentLocationReverseGeocoded = data;\n              this.makeApiCalls(data.city)\n          });\n      })\n  }\n\n    /**\n     *\n     * @param cityName: city parameter used in templates to know which city has been selected from the slider\n     * Event binding function to retrieve users current location and update screen\n     */\n  public changeCity(cityName:string){\n      this.makeApiCalls(cityName);\n      //TODO: implement here changes to classes when users selects a particular city\n  }\n\n    /**\n     *\n     * @returns {string} returns today's date in a pretty format (DayOfWeek, MonthName DayOfMonth, CurrentYear e.g. Thursday, January 20, 2099)\n     * Auxiliary method for date formatting\n     */\n  public getTodaysDate(){\n    let dayOfWeekMap = {\n          0: \"Sunday\",\n          1: \"Monday\",\n          2: \"Tuesday\",\n          3: \"Wednesday\",\n          4: \"Thursday\",\n          5: \"Friday\",\n          6: \"Saturday\",\n    }\n\n    let monthMap= {\n        0: \"January\",\n        1: \"February\",\n        2: \"March\",\n        3: \"April\",\n        4: \"May\",\n        5: \"June\",\n        6: \"July\",\n        7: \"August\",\n        8: \"September\",\n        9: \"October\",\n        10: \"November\",\n        11: \"December\",\n    }\n    let today = new Date();\n    let dayOfweek= dayOfWeekMap[today.getDay()];\n    let dayOfMonth = today.getDate();\n    let monthString = monthMap[today.getMonth()]\n    return dayOfweek+\", \"+monthString+\" \"+dayOfMonth+\", \"+today.getFullYear();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/principal/principal.ts","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport { Geolocation, Geoposition } from '@ionic-native/geolocation';\nimport { NativeGeocoder, NativeGeocoderReverseResult} from '@ionic-native/native-geocoder';\n\n/**\n * Data object that represents the user's approximate address, city and country specified in different\n * fields for faster referencing\n */\nexport class GeolocationAddress{\n    constructor(\n        public latlong:RawLocation,\n        public address:string,\n        public city:string,\n        public country:string\n    ){}\n}\n\n/**\n * Data object that corresponds to the user's current location in longitude and latitude\n */\nexport class RawLocation{\n    constructor(\n        public latitude:number,\n        public longitude:number\n    ){}\n}\n\n/**\n * Service that retrieves a user's current location using cordova's native hardware plugin and\n * then performs an external query to reverse geocode the user's approximate address\n */\n@Injectable()\nexport class GeolocationService {\n\n    constructor(private http: Http,\n                private geolocation: Geolocation,\n                private nativeGeocoder: NativeGeocoder){\n    }\n\n    /**\n     * Google Maps api root and free API key generated for this project\n     */\n    apiRoot:string='https://maps.googleapis.com/maps/api/geocode/json'\n    apiKey:string='AIzaSyDbAbiXC0l2fZUSmPGlHZayA-KzUIfLVLo'\n\n    /**\n     * Retrieves a user's address using his/her raw location (lat and long) using the Google Maps API for reverse geocoding\n     * @param latlng: the user's latitude and longitude object retrieved from the other native geolocation service\n     * @returns {Promise<T>}: return a promise that contains the user's approximate address encoded in the appropriate data object\n     */\n    public getMyCurrentAddressBasedOnLatLong(latlng:RawLocation): Promise<GeolocationAddress> {\n        let apiURL = `${this.apiRoot}?latlng=${latlng.latitude},${latlng.longitude}&key=${this.apiKey}`;\n        console.log(apiURL)\n        let promise = new Promise((resolve, reject) => {\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n                        console.log(res.json());\n                        resolve(new GeolocationAddress(\n                            new RawLocation(latlng.latitude,latlng.longitude),\n                            res.json().results[0].formatted_address,\n                            res.json().results[5].formatted_address.split(\",\")[0],\n                            res.json().results[5].formatted_address.split(\",\")[1]));\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n        return promise;\n    }\n\n\n    /**\n     * Retrieve's a user's current lat and longitude using the device's hardware through cordova\n     * @returns {Promise<T>}: returns a promise with the user's current latitude and longitude encoded in the appropriate data object\n     */\n    public getMyCurrentLocation():Promise<RawLocation>{\n        let pseudoPromise = new Promise((resolve, reject) => {\n            this.geolocation.getCurrentPosition()\n                .then(\n                    res=>{\n                        resolve(new RawLocation(res.coords.latitude, res.coords.longitude));\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                )\n        });\n        return pseudoPromise;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/geolocationService.ts","import { Component, ViewChild } from '@angular/core';\nimport { ForecastService, TodayForecast, HourForecast, NextDaysForecast } from '../../services/forecastService';\nimport { MyCitiesService, Ciudad } from '../../services/citiesService';\nimport { BaseChartDirective } from 'ng2-charts/ng2-charts';\n\n\n//TODO: fix initial graph pop bug\n//TODO: implement geoloc based initial graph\n//TODO: fix initial date bug\n\n@Component({\n    selector: 'graphs',\n    templateUrl: 'graficas.html'\n})\n\n\n/**\n * User graph componennt, controlls the user interaction between the different fields, the API calls and the corresponding UI updates\n * This component's state contains a reference to the chart's directives, the currently selected cities, the chart's data buffer\n * retrieved from the forecasts service and the state of the form's components for frequent usage.\n */\nexport class GraphsPage {\n    @ViewChild(\"baseChart\") chart: BaseChartDirective;\n\n    private ciudades: Ciudad[] = [];\n\n    private maxDaysApiRequest:number = 8;\n\n    currentDataBufferForGraph:Array<any> = [{data:[0,0,0,0,0], label:'Series A'}];\n\n    private nextDaysForecastsForGraph:NextDaysForecast[] = []\n\n    public lineChartData:Array<any>= [{data:[0,0,0,0,0,0], label:'Series A'}];\n    public lineChartLabels:Array<any> = ['0','0','0','0','0','0'];\n\n    private todaysDate:string =\"\";\n    private maxFutureDate:string =\"\";\n\n    private selectedInitDate:string = this.todaysDate;\n    private selectedFinalDate:string = \"\";\n\n    /**\n     *The following objects correspond to the graph configuration arguments, including label format, colors and label display locations, among others.\n     */\n    private lineChartOptions:any = {\n        responsive: true,\n        scales: {\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Temperature (°C)'\n                },\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    };\n\n    private selectedCity:string;\n    private selectedTempOption:string = \"max\";\n\n    public lineChartColors:Array<any> = [\n        {\n            backgroundColor: 'rgba(30,144,255,0.2)',\n            borderColor: 'rgba(148,159,177,1)',\n            pointBackgroundColor: 'rgba(148,159,177,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n        }\n    ];\n    public lineChartLegend:boolean = true;\n    public lineChartType:string = 'line';\n\n    /**\n     * Component constructor.\n     * By default it retrieves the data from the user's current location and draws the graph accordingly.\n     * @param forecastService: retrieves weather data from the services\n     * @param myCitiesService: retrieves currently saved cities by users\n     */\n    constructor(private forecastService: ForecastService, private myCitiesService: MyCitiesService) {\n\n        this.forecastService.weatherNextDays(\"Mexico City\").then( data => {\n            this.lineChartData = [{data: this.getMaxTemps(data), label: \"Mexico City\"}];\n            this.lineChartLabels = this.buildLabelArray(data);\n            this.reloadChart();\n        });\n\n        this.myCitiesService.retrieveMyCities().then(data=>{\n            this.ciudades = data\n        } );\n\n        this.setTodayDateTime();\n        this.setMaxDateTime();\n    }\n\n    /**\n     * Makes a graph full state refresh whenever it's needed\n     * This includes the data buffer and axes labels\n     */\n    reloadChart(){\n        if (this.chart !== undefined) {\n            this.chart.chart.destroy();\n            this.chart.chart = 0;\n\n            this.chart.labels = this.lineChartLabels;\n            this.chart.datasets = this.lineChartData;\n            this.chart.ngOnInit();\n        }\n    }\n\n    /**\n     * Event binding method for templates, when a new city is selected in the pop-up menu\n     */\n    public changeCity() {\n        this.updateGraph();\n    }\n\n    /**\n     * Make a char with the updated data buffers\n     * @param forecastDays: what is the date range in days desired for the service query\n     */\n    public updateGraph(forecastDays:number = 0){\n        this.forecastService.weatherNextDays(this.selectedCity, forecastDays).then( data=>{\n            this.nextDaysForecastsForGraph = data;\n            this.populateGraph();\n        });\n    }\n\n    /**\n     * Event binding method for templates, when new option (min, max or avg temperatures) is selected\n     */\n    public optionChanged(){\n        this.populateGraph();\n    }\n\n    /**\n     * Retrieve new data from the forecast services and fill the graph data buffer with this new information\n     * Depending on the option selected in the UI, this will retrieve the maximum, minimum or average temperatures\n     * of the desired region for a specific period.\n     */\n    public populateGraph(){\n        let dataAux =[];\n        switch(this.selectedTempOption){\n            case \"max\":\n                dataAux = [{data: this.getMaxTemps(this.nextDaysForecastsForGraph), label: this.selectedCity}];\n                break;\n            case \"min\":\n                dataAux = [{data: this.getMinTemps(this.nextDaysForecastsForGraph), label: this.selectedCity}];\n                break;\n            case \"avg\":\n                dataAux = [{data: this.getAvgTemps(this.nextDaysForecastsForGraph), label: this.selectedCity}];\n                break;\n        }\n\n        this.lineChartLabels = this.buildLabelArray(this.nextDaysForecastsForGraph);\n        this.lineChartData = dataAux;\n        this.reloadChart();\n\n    }\n\n    /**\n     * Auxiliary function for filling data buffers in the correct format\n     * @param nextDayForecasts: takes in a NextDayForecast array and maps it it to a typical JS array\n     * @returns {[number,number,number,number,number]}: array of maximum temperatures in a specific date and location\n     */\n    public getMaxTemps(nextDayForecasts:NextDaysForecast[]): number[]{\n        return nextDayForecasts.map(e=>e.tempMax);\n    }\n\n    /**\n     * Auxiliary function for filling data buffers in the correct format\n     * @param nextDayForecasts: takes in a NextDayForecast array and maps it it to a typical JS array\n     * @returns {[number,number,number,number,number]}: array of minumum temperatures in a specific date and location\n     */\n    public getMinTemps(nextDayForecasts:NextDaysForecast[]): number[]{\n        return nextDayForecasts.map(e=>e.tempMin);\n    }\n\n    /**\n     * Auxiliary function for filling data buffers in the correct format\n     * @param nextDayForecasts: takes in a NextDayForecast array and maps it it to a typical JS array\n     * @returns {[number,number,number,number,number]}: array of average temperatures in a specific date and location\n     */\n    public getAvgTemps(nextDayForecasts:NextDaysForecast[]): number[]{\n        return nextDayForecasts.map(e=>e.tempAvg);\n    }\n\n    /**\n     * Auxiliary function for filling the label buffers in the correct format\n     * @param nextDayForecasts: takes in a NextDayForecast array, takes its dates and build the label data buffer\n     * @returns {[number,number,number,number,number]}: array of dates as strings in a correct format\n     */\n    public buildLabelArray(nextDayForecasts:NextDaysForecast[]): string[]{\n        return nextDayForecasts.map(e=>this.buildLabelFromString(e.date));\n    }\n\n\n    /**\n     * Takes a date in an YYYY-MM-dd format and pretty-formats it\n     * @param date: date in YYYY-MM-dd format\n     * @returns {string}: return date formatted as e.g. Jan 31\n     */\n    public buildLabelFromString(date:string){\n        let abbreviatedMonthMap = {\n            0:\"Jan\", 1:\"Feb\", 2:\"Mar\", 3:\"Apr\", 4:\"May\", 5:\"Jun\", 6:\"Jul\", 7:\"Aug\", 8:\"Sep\", 9:\"Oct\", 10:\"Nov\", 11:\"Dec\"\n        }\n        let d = new Date(date)\n        return abbreviatedMonthMap[d.getMonth()]+\" \"+(d.getDate()+1);\n\n    }\n\n    /**\n     * Get today's date in timestamp format and set it to YYYY-MM-DD format\n     */\n    public setTodayDateTime(){\n        let today = new Date();\n        this.todaysDate = today.getFullYear()+\"-\"+this.buildCorrectFormatMonth(today)+\"-\"+ this.buildCorrectFormatDay(today);\n\n    }\n\n    /**\n     * Establish the maximum future date in which the weather forecast service can be queried\n     * @param maxDays: maximum amount of days for forecast service query, depends on API restrictions\n     */\n    public setMaxDateTime(maxDays = this.maxDaysApiRequest){\n        let maxDate = new Date((new Date().getTime()) + maxDays*24*60*60*1000);\n        this.maxFutureDate= maxDate.getFullYear()+\"-\"+this.buildCorrectFormatMonth(maxDate)+\"-\"+ this.buildCorrectFormatDay(maxDate);\n    }\n\n    /**\n     * Auxiliar function for formatting dates\n     * @param date: take a day of the month as e.g. 23 or 1\n     * @returns {string|number}: if a day is less than 10 format it as e.g. 01 or 08\n     */\n    public buildCorrectFormatDay(date){\n        return (date.getDate()+1) < 10 ? \"0\"+(date.getDate()+1): (date.getDate()+1);\n    }\n\n    /**\n     * Auxiliar function for formatting dates\n     * @param date: take a month as e.g. 12 or 8\n     * @returns {string|number}: if a month's number is less than 10 format it as e.g. 01 or 08\n     */\n    public buildCorrectFormatMonth(date){\n        return (date.getMonth()+1) < 10 ? \"0\"+(date.getMonth()+1): (date.getMonth()+1);\n    }\n\n    /**\n     * Event binding function with templates, updates function once the final date date-picker has been changed\n     */\n    public triggerChartUpdateOnFinalDateChange(){\n        this.updateGraph(this.calculateDifferenceInDaysBetweenDates());\n    }\n\n    /**\n     * Axuiliary function to calculate the number of dates between the currently selected initial and final date for query\n     * @returns {number}: number of dates between two days\n     */\n    public calculateDifferenceInDaysBetweenDates(){\n        var timeDifferenceEpoch = Math.abs(new Date(this.selectedInitDate).getTime() - new Date(this.selectedFinalDate).getTime());\n        var dayDifference = Math.ceil(timeDifferenceEpoch / (1000 * 3600 * 24));\n        console.log(dayDifference)\n        return dayDifference;\n    }\n\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/graficas/graficas.ts","import { Component } from '@angular/core';\nimport { ChatbotService, Conversation, Message } from '../../services/chatbotService';\n\n\n\n@Component({\n    selector: 'bot',\n    templateUrl: 'chatbot.html'\n})\n\nexport class ChatbotPage {\n\n    public conversation:Conversation;\n\n    constructor(private chatbotService: ChatbotService) {\n        chatbotService.retrieveConversation().then(data=>this.conversation=data);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/chatbot/chatbot.ts","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/do';\nimport * as $ from 'jquery';\n/**\n * Data transfer objects that specifies the encoding data of a message between a user and the chatbot\n */\nexport class Message{\n    /**\n     * @param isBotMessage: the message is form a user or the bot\n     * @param timestamp: time and date in which the message was sent\n     * @param content: the content of the message, can be information for graphs and what not\n     */\n    constructor(\n        public isBotMessage:boolean,\n        public timestamp:string,\n        public content:string\n    ){}\n}\n\n/**\n * Data transfer object that codifies the conversation between a user and the chatbot\n */\nexport class Conversation{\n    /**\n     * @param messages: array of messages that constitute the actual conversation\n     * @param init_time: timestamp of when the conversation began\n     * @param end_time: timestamp of when the conversation ended\n     */\n    constructor(\n        public messages:Message[],\n        public init_time:string,\n        public end_time:string\n    ){}\n}\n\n\n@Injectable()\nexport class ChatbotService {\n\n    constructor(private http: Http) {\n    }\n\n    //Currently a dummy call to a local json\n    /**\n     * Backend REST endpoint URL to retrieve the conversation between a user and the chatbot\n     */\n    apiRoot:string = '../assets/json/chatbot/conversation.json';\n    // apiKey:String = '68940978733581cc8ee68abc6610f53e'; //for later\n\n    /**\n     * Function that performs a REST call to the backend and retrieves a user's conversation with the chatbot in an array of messages\n     * @returns {Promise<T>}: promise that resolves to a user-chatbot conversation in the appropriate DTO\n     */\n    public retrieveConversation():Promise<Conversation>{\n        let apiURL = `${this.apiRoot}`;\n\n        let promise = new Promise((resolve, reject) => {\n            this.http.get(apiURL)\n                .toPromise()\n                .then(\n                    res => {\n                        let messages:Message[] =[]\n                        let messagesJson = $.map(res.json(), function(e){return e});\n                        console.log(messagesJson)\n                        $.each(messagesJson, function(i,message){\n                            messages.push(new Message(\n                                message.isBotMessage,\n                                message.timestamp,\n                                message.content)\n                            )\n                        });\n                        resolve(messages);\n                    },\n                    msg => {\n                        reject(msg);\n                    }\n                );\n        });\n\n        return promise;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/chatbotService.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport { TabsPage } from '../../pages/tabs/tabs';\nimport { UserLogin, AuthorizationService, AuthorizationToken} from '../../services/authService'\nimport { LoginPage } from '../login/login'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'register',\n    templateUrl: 'register.html'\n})\n\nexport class RegisterPage {\n\n    slideOneForm: FormGroup;\n\n\n    //TODO: implement form validators\n    /**\n     *\n     * @param navCtrl: application navigation controller to find your way between views\n     * @param authorizationService: service that provides users with authorization tokens once registered\n     * @param formBuilder: angular utility for form validation\n     * Register form component basic constructor\n     */\n    public constructor(public navCtrl: NavController, public authorizationService:AuthorizationService, public formBuilder: FormBuilder){\n        this.slideOneForm = formBuilder.group({\n            name: [''],\n            email: [''],\n            username: [''],\n            password: [''],\n            confirmpassword: ['']\n        });\n    }\n\n    /**\n     * Form fields will be validated and sent to backend for user final registration\n     */\n    public register():void{\n        //TODO: implement here call to POST API endpoint when backend is ready\n        this.navCtrl.push(LoginPage);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/login/register/register.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\n\n\n@Component({\n    selector: 'adminCities',\n    templateUrl: 'cities.html'\n})\n\n/**\n * Admin cities tab constructor\n */\nexport class AdminCities {\n\n    public constructor(public navCtrl: NavController) {\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/cities/cities.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\n\n\n@Component({\n    selector: 'myaccount',\n    templateUrl: 'myaccount.html'\n})\n\n\n/**\n * Admin account details tab constructor\n */\nexport class AdminMyAccount {\n\n    public constructor(public navCtrl: NavController) {\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/myaccount/myaccount.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\n\n\n@Component({\n    selector: 'stats',\n    templateUrl: 'stats.html'\n})\n\n/**\n * Admin statistics tab constructor\n */\nexport class AdminStats {\n\n    public constructor(public navCtrl: NavController) {\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/stats/stats.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\n@Component({\n    selector: 'adminUsers',\n    templateUrl: 'users.html'\n})\n\n/**\n * Admin users tab constructor\n */\nexport class AdminUsers {\n\n    public constructor(public navCtrl: NavController) {\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/users/users.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule, ErrorHandler } from '@angular/core';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { BrowserModule } from '@angular/platform-browser';;\nimport {LocationStrategy} from '@angular/common';\n\n\nimport { BotCast } from './app.component';\nimport {HttpModule, Http, Response} from '@angular/http';\n\nimport { PrincipalPage } from '../pages/principal/principal';\nimport { MyCitiesService } from '../services/citiesService';\nimport { ForecastService } from '../services/forecastService';\nimport { GraphsService } from '../services/graphsService';\nimport { ChatbotService } from '../services/chatbotService';\nimport { AuthorizationService } from '../services/authService';\nimport {GeolocationService} from '../services/geolocationService';\n\nimport { GraphsPage } from '../pages/graficas/graficas';\nimport { ChartsModule } from 'ng2-charts';\n\nimport { TabsPage } from '../pages/tabs/tabs';\nimport { ChatbotPage } from '../pages/chatbot/chatbot';\nimport { MyForecastsPage } from '../pages/myforecasts/myforecasts';\n\nimport { LoginPage } from '../login/login/login';\nimport { RegisterPage } from '../login/register/register';\n\nimport { NavBar } from '../pages/admin/navbar/navbar';\n\nimport {AdminDashboard} from '../pages/admin/dashboard/dashboard';\n\nimport {AdminCities} from '../pages/admin/cities/cities';\nimport {AdminMyAccount} from '../pages/admin/myaccount/myaccount';\nimport {AdminStats} from '../pages/admin/stats/stats';\nimport {AdminUsers} from '../pages/admin/users/users';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\nimport {Geolocation} from '@ionic-native/geolocation';\nimport {NativeGeocoder} from '@ionic-native/native-geocoder';\n\n\n/**\n * Register components, import plugins and angular core utilities, Register providers for services\n */\n\n@NgModule({\n  declarations: [\n    BotCast,\n    TabsPage,\n    PrincipalPage,\n    GraphsPage,\n    MyForecastsPage,\n    ChatbotPage,\n    LoginPage,\n    RegisterPage,\n    AdminDashboard,\n    NavBar,\n    AdminCities,\n    AdminUsers,\n    AdminMyAccount,\n    AdminStats,\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    ChartsModule,\n    IonicModule.forRoot(BotCast)\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    BotCast,\n    TabsPage,\n    PrincipalPage,\n    GraphsPage,\n    MyForecastsPage,\n    ChatbotPage,\n    LoginPage,\n    RegisterPage,\n    AdminDashboard,\n    NavBar,\n    AdminCities,\n    AdminUsers,\n    AdminMyAccount,\n    AdminStats,\n\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    MyCitiesService,\n    ForecastService,\n    GraphsService,\n    ChatbotService,\n    AuthorizationService,\n    Geolocation,\n    NativeGeocoder,\n    GeolocationService,\n    {provide: {ErrorHandler, LocationStrategy}, useClass: IonicErrorHandler}\n  ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { LoginPage } from '../login/login/login';\n\n@Component({\n  templateUrl: 'app.html'\n})\n\n/**\n * Initialize application, register platform and aux services\n */\nexport class BotCast {\n  rootPage:any = LoginPage;\n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) {\n    platform.ready().then(() => {\n      statusBar.styleDefault();\n      splashScreen.hide();\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","var map = {\n\t\"./af\": 225,\n\t\"./af.js\": 225,\n\t\"./ar\": 226,\n\t\"./ar-dz\": 227,\n\t\"./ar-dz.js\": 227,\n\t\"./ar-kw\": 228,\n\t\"./ar-kw.js\": 228,\n\t\"./ar-ly\": 229,\n\t\"./ar-ly.js\": 229,\n\t\"./ar-ma\": 230,\n\t\"./ar-ma.js\": 230,\n\t\"./ar-sa\": 231,\n\t\"./ar-sa.js\": 231,\n\t\"./ar-tn\": 232,\n\t\"./ar-tn.js\": 232,\n\t\"./ar.js\": 226,\n\t\"./az\": 233,\n\t\"./az.js\": 233,\n\t\"./be\": 234,\n\t\"./be.js\": 234,\n\t\"./bg\": 235,\n\t\"./bg.js\": 235,\n\t\"./bn\": 236,\n\t\"./bn.js\": 236,\n\t\"./bo\": 237,\n\t\"./bo.js\": 237,\n\t\"./br\": 238,\n\t\"./br.js\": 238,\n\t\"./bs\": 239,\n\t\"./bs.js\": 239,\n\t\"./ca\": 240,\n\t\"./ca.js\": 240,\n\t\"./cs\": 241,\n\t\"./cs.js\": 241,\n\t\"./cv\": 242,\n\t\"./cv.js\": 242,\n\t\"./cy\": 243,\n\t\"./cy.js\": 243,\n\t\"./da\": 244,\n\t\"./da.js\": 244,\n\t\"./de\": 245,\n\t\"./de-at\": 246,\n\t\"./de-at.js\": 246,\n\t\"./de-ch\": 247,\n\t\"./de-ch.js\": 247,\n\t\"./de.js\": 245,\n\t\"./dv\": 248,\n\t\"./dv.js\": 248,\n\t\"./el\": 249,\n\t\"./el.js\": 249,\n\t\"./en-au\": 250,\n\t\"./en-au.js\": 250,\n\t\"./en-ca\": 251,\n\t\"./en-ca.js\": 251,\n\t\"./en-gb\": 252,\n\t\"./en-gb.js\": 252,\n\t\"./en-ie\": 253,\n\t\"./en-ie.js\": 253,\n\t\"./en-nz\": 254,\n\t\"./en-nz.js\": 254,\n\t\"./eo\": 255,\n\t\"./eo.js\": 255,\n\t\"./es\": 256,\n\t\"./es-do\": 257,\n\t\"./es-do.js\": 257,\n\t\"./es.js\": 256,\n\t\"./et\": 258,\n\t\"./et.js\": 258,\n\t\"./eu\": 259,\n\t\"./eu.js\": 259,\n\t\"./fa\": 260,\n\t\"./fa.js\": 260,\n\t\"./fi\": 261,\n\t\"./fi.js\": 261,\n\t\"./fo\": 262,\n\t\"./fo.js\": 262,\n\t\"./fr\": 263,\n\t\"./fr-ca\": 264,\n\t\"./fr-ca.js\": 264,\n\t\"./fr-ch\": 265,\n\t\"./fr-ch.js\": 265,\n\t\"./fr.js\": 263,\n\t\"./fy\": 266,\n\t\"./fy.js\": 266,\n\t\"./gd\": 267,\n\t\"./gd.js\": 267,\n\t\"./gl\": 268,\n\t\"./gl.js\": 268,\n\t\"./gom-latn\": 269,\n\t\"./gom-latn.js\": 269,\n\t\"./he\": 270,\n\t\"./he.js\": 270,\n\t\"./hi\": 271,\n\t\"./hi.js\": 271,\n\t\"./hr\": 272,\n\t\"./hr.js\": 272,\n\t\"./hu\": 273,\n\t\"./hu.js\": 273,\n\t\"./hy-am\": 274,\n\t\"./hy-am.js\": 274,\n\t\"./id\": 275,\n\t\"./id.js\": 275,\n\t\"./is\": 276,\n\t\"./is.js\": 276,\n\t\"./it\": 277,\n\t\"./it.js\": 277,\n\t\"./ja\": 278,\n\t\"./ja.js\": 278,\n\t\"./jv\": 279,\n\t\"./jv.js\": 279,\n\t\"./ka\": 280,\n\t\"./ka.js\": 280,\n\t\"./kk\": 281,\n\t\"./kk.js\": 281,\n\t\"./km\": 282,\n\t\"./km.js\": 282,\n\t\"./kn\": 283,\n\t\"./kn.js\": 283,\n\t\"./ko\": 284,\n\t\"./ko.js\": 284,\n\t\"./ky\": 285,\n\t\"./ky.js\": 285,\n\t\"./lb\": 286,\n\t\"./lb.js\": 286,\n\t\"./lo\": 287,\n\t\"./lo.js\": 287,\n\t\"./lt\": 288,\n\t\"./lt.js\": 288,\n\t\"./lv\": 289,\n\t\"./lv.js\": 289,\n\t\"./me\": 290,\n\t\"./me.js\": 290,\n\t\"./mi\": 291,\n\t\"./mi.js\": 291,\n\t\"./mk\": 292,\n\t\"./mk.js\": 292,\n\t\"./ml\": 293,\n\t\"./ml.js\": 293,\n\t\"./mr\": 294,\n\t\"./mr.js\": 294,\n\t\"./ms\": 295,\n\t\"./ms-my\": 296,\n\t\"./ms-my.js\": 296,\n\t\"./ms.js\": 295,\n\t\"./my\": 297,\n\t\"./my.js\": 297,\n\t\"./nb\": 298,\n\t\"./nb.js\": 298,\n\t\"./ne\": 299,\n\t\"./ne.js\": 299,\n\t\"./nl\": 300,\n\t\"./nl-be\": 301,\n\t\"./nl-be.js\": 301,\n\t\"./nl.js\": 300,\n\t\"./nn\": 302,\n\t\"./nn.js\": 302,\n\t\"./pa-in\": 303,\n\t\"./pa-in.js\": 303,\n\t\"./pl\": 304,\n\t\"./pl.js\": 304,\n\t\"./pt\": 305,\n\t\"./pt-br\": 306,\n\t\"./pt-br.js\": 306,\n\t\"./pt.js\": 305,\n\t\"./ro\": 307,\n\t\"./ro.js\": 307,\n\t\"./ru\": 308,\n\t\"./ru.js\": 308,\n\t\"./sd\": 309,\n\t\"./sd.js\": 309,\n\t\"./se\": 310,\n\t\"./se.js\": 310,\n\t\"./si\": 311,\n\t\"./si.js\": 311,\n\t\"./sk\": 312,\n\t\"./sk.js\": 312,\n\t\"./sl\": 313,\n\t\"./sl.js\": 313,\n\t\"./sq\": 314,\n\t\"./sq.js\": 314,\n\t\"./sr\": 315,\n\t\"./sr-cyrl\": 316,\n\t\"./sr-cyrl.js\": 316,\n\t\"./sr.js\": 315,\n\t\"./ss\": 317,\n\t\"./ss.js\": 317,\n\t\"./sv\": 318,\n\t\"./sv.js\": 318,\n\t\"./sw\": 319,\n\t\"./sw.js\": 319,\n\t\"./ta\": 320,\n\t\"./ta.js\": 320,\n\t\"./te\": 321,\n\t\"./te.js\": 321,\n\t\"./tet\": 322,\n\t\"./tet.js\": 322,\n\t\"./th\": 323,\n\t\"./th.js\": 323,\n\t\"./tl-ph\": 324,\n\t\"./tl-ph.js\": 324,\n\t\"./tlh\": 325,\n\t\"./tlh.js\": 325,\n\t\"./tr\": 326,\n\t\"./tr.js\": 326,\n\t\"./tzl\": 327,\n\t\"./tzl.js\": 327,\n\t\"./tzm\": 328,\n\t\"./tzm-latn\": 329,\n\t\"./tzm-latn.js\": 329,\n\t\"./tzm.js\": 328,\n\t\"./uk\": 330,\n\t\"./uk.js\": 330,\n\t\"./ur\": 331,\n\t\"./ur.js\": 331,\n\t\"./uz\": 332,\n\t\"./uz-latn\": 333,\n\t\"./uz-latn.js\": 333,\n\t\"./uz.js\": 332,\n\t\"./vi\": 334,\n\t\"./vi.js\": 334,\n\t\"./x-pseudo\": 335,\n\t\"./x-pseudo.js\": 335,\n\t\"./yo\": 336,\n\t\"./yo.js\": 336,\n\t\"./zh-cn\": 337,\n\t\"./zh-cn.js\": 337,\n\t\"./zh-hk\": 338,\n\t\"./zh-hk.js\": 338,\n\t\"./zh-tw\": 339,\n\t\"./zh-tw.js\": 339\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 457;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/moment/locale ^\\.\\/.*$\n// module id = 457\n// module chunks = 0","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/do';\n\n\n/**\n * Model for information transmission object between this service and the user graph view\n */\nexport class GraphDayForecast{\n    /**\n     *\n     * @param date: forecast date/historical data point date\n     * @param tempMax: that day's maximum temperature\n     * @param tempMin: that day's minimum temperature\n     * @param condition: that day's weather condition e.g. \"Light snow\" or \"Overcast\"\n     */\n    constructor(\n        public date:string,\n        public tempMax:number,\n        public tempMin:number,\n        public condition: string\n    ){}\n}\n\n/**\n * Service that build the array of weather historical data for the user graphs tab\n */\n@Injectable()\nexport class GraphsService { //for historical data, pending, API in the past and 8+ days in the future requires premium account\n\n    apiRoot:string = 'http://api.apixu.com/v1/forecast.json';\n    apiKey:String = 'e3dd4e798f1d4c61821153113172310';\n\n    constructor(private http: Http) {\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/graphsService.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport {LoginPage} from '../../../login/login/login'\n\nimport {AdminDashboard} from '../dashboard/dashboard'\nimport {AdminCities} from '../cities/cities'\nimport {AdminMyAccount} from '../myaccount/myaccount'\nimport {AdminStats} from '../stats/stats'\nimport {AdminUsers} from '../users/users'\n\nimport { App, ViewController } from 'ionic-angular';\n\n\n\n@Component({\n    selector: 'navbar',\n    templateUrl: 'navbar.html'\n})\n\n/**\n * Admin navigation bar component, corresponds to the reusable visual element displayed at the top of all administrator views\n */\nexport class NavBar {\n\n    /**\n     * Navigation bar constructor\n     * @param navCtrl: application navigation controller\n     * @param navParams: parameters to be passed between different screens\n     * @param appCtrl: application general controler\n     */\n    public constructor(public navCtrl: NavController,public viewCtrl: ViewController, public appCtrl: App) {\n\n    }\n\n    /**\n     * Event binding function with template.\n     * When dashboard button is pressed, change the current view to the dashboard tab\n     */\n    public toDashboardAdminPage():void{\n        this.navCtrl.push(AdminDashboard,{}, {animate: false})\n    }\n\n    /**\n     * Event binding function with template.\n     * When users admin button is pressed, change the current view to the active users tab\n     */\n    public toUsersAdminPage():void{\n        this.navCtrl.push(AdminUsers,{}, {animate: false})\n    }\n\n    /**\n     * Event binding function with template.\n     * When statistics button is pressed, change the current view to the statistics tab\n     */\n    public toStatsAdminPage():void{\n\n        this.navCtrl.push(AdminStats,{}, {animate: false})\n    }\n\n    /**\n     * Event binding function with template.\n     * When cities button is pressed, change the current view to the cities tab\n     */\n    public toCitiesAdminPage():void{\n        this.navCtrl.push(AdminCities,{}, {animate: false})\n    }\n\n    /**\n     * Event binding function with template.\n     * When admin account button is pressed, change the current view to the admin account tab\n     */\n    public toAccountAdminPage():void{\n        this.navCtrl.push(AdminMyAccount,{}, {animate: false})\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/admin/navbar/navbar.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams} from 'ionic-angular';\n\n@Component({\n    selector: 'myforecasts',\n    templateUrl: 'myforecasts.html'\n})\n\n/**\n * Component that contains the user's saved forecasts\n */\nexport class MyForecastsPage {\n    /**\n     * Componennt constructor\n     * @param navCtrl: application navigation controller\n     * @param navParams: parameters to be passed between different screens\n     */\n    public constructor(\n                       public navCtrl: NavController,\n                       public navParams: NavParams) {\n\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/myforecasts/myforecasts.ts"],"sourceRoot":""}